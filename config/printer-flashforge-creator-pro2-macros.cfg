#VERSION 20240319_000000
[gcode_macro PARK_extruder]
gcode:
    #Check active extruder!!!!
    {% if printer.dual_carriage['carriage_1'] != 'INACTIVE' %}
        RESPOND MSG="Can only park right extruder when PRIMARY in IDEX mode"
        { action_raise_error("Can only park right extruder when PRIMARY in IDEX mode") }
    {% endif %}

    SAVE_GCODE_STATE NAME=park0
    G90
    G92 X{printer.toolhead.position.x}
    ; TODO: better read homing speed from config?
    G1 X{printer.toolhead.axis_maximum.x} F{printer.toolhead.max_velocity * 60.0}
    # Cura reenables part fans automcatically
    SET_FAN_SPEED FAN=right_part_fan SPEED=0.0
    RESTORE_GCODE_STATE NAME=park0


[gcode_macro PARK_extruder1]
gcode:
    #Check active extruder!!!!
    {% if printer.dual_carriage['carriage_1'] != 'PRIMARY' %}
        RESPOND MSG="Can only park left extruder when PRIMARY in IDEX mode"
        { action_raise_error("Can only park left extruder when PRIMARY in IDEX mode") }
    {% endif %}

    SAVE_GCODE_STATE NAME=park1
    G90
    G92 X{printer.toolhead.position.x}
    ; TODO: better read homing speed from config?
    G1 X{printer.toolhead.axis_minimum.x} F{printer.toolhead.max_velocity * 60.0}
    # Cura reenables part fans automcatically
    SET_FAN_SPEED FAN=left_part_fan SPEED=0.0
    RESTORE_GCODE_STATE NAME=park1

[gcode_macro ACTIVATE_DUPLICATE_MODE]
description: Setup for Copy & Mirror Modes
gcode: 
    {% set mode = params.MODE %}
    {% set min_left = printer.configfile.settings.dual_carriage.position_min|float %}
    {% set center_x = 137 + min_left  %}
    
    # RESPOND MSG="Activating Copy Mode"
    # RESPOND MSG="copy 1: {printer.dual_carriage} {printer.gcode_move}"
    SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
    ACTIVATE_EXTRUDER EXTRUDER=extruder1
    G1 X{0 if mode == 'COPY' else (center_x - 20)} F{printer.toolhead.max_velocity * 60.0}
    # RESPOND MSG="copy 2: {printer.dual_carriage} {printer.gcode_move}"

    SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
    ACTIVATE_EXTRUDER EXTRUDER=extruder
    G1 X{(center_x + 1) if mode == 'COPY' else (center_x + 20)} Y0 F{printer.toolhead.max_velocity * 60.0}
    # RESPOND MSG="copy 3: {printer.dual_carriage} {printer.gcode_move}"    
    
    SET_DUAL_CARRIAGE CARRIAGE=1 MODE={mode}
    # RESPOND MSG="copy 4: {printer.dual_carriage} {printer.gcode_move}"
    SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder
    G92 X0 Y0
    # RESPOND MSG="copy 5: {printer.dual_carriage} {printer.gcode_move}"

# A helper script to activate copy mode
[gcode_macro ACTIVATE_COPY_MODE]
gcode:
    ACTIVATE_DUPLICATE_MODE MODE=COPY

# A helper script to activate mirror mode
[gcode_macro ACTIVATE_MIRROR_MODE]
gcode:
    ACTIVATE_DUPLICATE_MODE MODE=MIRROR

[gcode_macro START_PRINT]
gcode:
  #Get Bed and Extruder temperature from Slicer GCode
  {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(200)|float %}
  {% set idex_mode = params.IDEX_MODE|default('IDEX')|lower %}
  RESPOND MSG="IDEX Mode: {idex_mode}"

  G92 E0 ; reset extruder
  G90 ; set absolute positioning
  ; G28 Resets extruder/dual_carriage information
  G28 ; Home all Axes
  
  M117 Heatup Bed {BED_TEMP}°C Nozzle {EXTRUDER_TEMP}°C
  # Change for unheated build plate
  {% if params.BED_TEMP != "0" %} 
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP}  
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED_TEMP*0.96} MAXIMUM={BED_TEMP*1.04}
  {% endif %}

  {% if idex_mode == 'copy' %}
    ACTIVATE_COPY_MODE    
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER_TEMP}    
    SET_HEATER_TEMPERATURE HEATER=extruder1 TARGET={EXTRUDER_TEMP}    
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={EXTRUDER_TEMP*0.98} MAXIMUM={EXTRUDER_TEMP*1.02}
    TEMPERATURE_WAIT SENSOR=extruder1 MINIMUM={EXTRUDER_TEMP*0.98} MAXIMUM={EXTRUDER_TEMP*1.02}
  {% elif idex_mode == 'mirror' %}
    ACTIVATE_MIRROR_MODE
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER_TEMP}    
    SET_HEATER_TEMPERATURE HEATER=extruder1 TARGET={EXTRUDER_TEMP}    
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={EXTRUDER_TEMP*0.98} MAXIMUM={EXTRUDER_TEMP*1.02}
    TEMPERATURE_WAIT SENSOR=extruder1 MINIMUM={EXTRUDER_TEMP*0.98} MAXIMUM={EXTRUDER_TEMP*1.02}
  {% else %}
    ACTIVATE_EXTRUDER EXTRUDER={printer.toolhead.extruder}  
    {% if printer.dual_carriage['carriage_0'] == 'PRIMARY' %}
        SET_DUAL_CARRIAGE CARRIAGE=0
    {% else %}
        SET_DUAL_CARRIAGE CARRIAGE=1
    {% endif %}
    SET_HEATER_TEMPERATURE HEATER={printer.toolhead.extruder} TARGET={EXTRUDER_TEMP}    
    TEMPERATURE_WAIT SENSOR={printer.toolhead.extruder} MINIMUM={EXTRUDER_TEMP*0.98} MAXIMUM={EXTRUDER_TEMP*1.02}
  {% endif %}
 
  G1 Z10 ; move z up little to prevent scratching of surface
  G12

[gcode_macro END_PRINT]
gcode:
  # M83 ; Extruder relative positin
  TURN_OFF_HEATERS
  ; Lower as much as posible
  G90 ;Absolute positionning
  G1 Z{printer.toolhead.axis_maximum.z}
  ; Now we should safe to park X and Y  by homing
  G28 X Y
  RESPOND MSG="END_PRINT"
  ; and we can stop the part fans
  SET_FAN_SPEED FAN=left_part_fan SPEED=0
  SET_FAN_SPEED FAN=right_part_fan SPEED=0

  ;PRESENT_PRINT
  M106 S0 ;Turn-off fan
  M84 ; Power off 
  
  SET_LED LED=print_room RED=0.4 GREEN=1.0 BLUE=0.2
  M117 Print Complete

[gcode_macro clean_nozzle]
description: Wipes nozzles
gcode:
    SAVE_GCODE_STATE name=clean_nozzle
    SAVE_DUAL_CARRIAGE_STATE name=clean_nozzle
    G92 X{printer.toolhead.position.x}

    {% if params.RIGHT is defined %}
        SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY        
        G1 X{printer.toolhead.axis_maximum.x} F{printer.toolhead.max_velocity * 60.0}
        {% for x in range(params.RIGHT|default(1)|int) %}
            G1 X{printer.toolhead.axis_maximum.x - 15} F{printer.toolhead.max_velocity * 60.0}
            G1 X{printer.toolhead.axis_maximum.x} F{printer.toolhead.max_velocity * 60.0}
        {% endfor %}
    {% endif %}

    {% if params.LEFT is defined %}
        SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
        G1 X{printer.toolhead.axis_minimum.x} F{printer.toolhead.max_velocity * 60.0}
        
        {% for x in range(params.LEFT|default(1)|int) %}
            G1 X{printer.toolhead.axis_minimum.x + 15} F{printer.toolhead.max_velocity * 60.0}
            G1 X{printer.toolhead.axis_minimum.x} F{printer.toolhead.max_velocity * 60.0}
        {% endfor %}
    {% endif %}

    RESTORE_DUAL_CARRIAGE_STATE name=clean_nozzle MOVE_SPEED={printer.toolhead.max_velocity}
    RESTORE_GCODE_STATE name=clean_nozzle

[gcode_macro debug_output]
gcode:    
    RESPOND MSG="Dual_Carriage: {printer.dual_carriage}"
    RESPOND MSG="Toolhead: {printer.toolhead}"
    RESPOND MSG="gcode_move: {printer.gcode_move}"
    RESPOND MSG="Part Fans L/R:  {printer.left_part_fan} {printer.right_part_fan}"
    RESPOND MSG="homing: {homing}"

#
# Standard g-codes
#

[gcode_macro G12]
description: Default clean nozzle command
gcode: 
    {% set clean_count = params.S|default(3)|int %}    
    {% set right = ('RIGHT=' ~ clean_count) if printer.dual_carriage['carriage_0'] != 'INACTIVE' else '' %}
    {% set left = ('LEFT=' ~ clean_count) if printer.dual_carriage['carriage_1'] != 'INACTIVE' else '' %}
    CLEAN_NOZZLE {right} {left}

[gcode_macro G28]
rename_existing: G28.0
gcode: 
    {% set active_extruder = printer.toolhead.extruder %}
    G28.0 {rawparams}
    
    {% if (params.X is undefined and params.Y is undefined) or params.Z is defined  %}
        SAVE_GCODE_STATE    
        G90 
        G1 Z10
        RESTORE_GCODE_STATE
    {% endif %}
    
    {% if printer.toolhead.extruder != active_extruder %}
        ACTIVATE_EXTRUDER EXTRUDER={active_extruder}
    {% endif %}    
    {% if printer.toolhead.extruder == 'extruder' %}        
        SET_DUAL_CARRIAGE CARRIAGE=0
        #SET_KINEMATIC_POSITION X={printer.toolhead.axis_maximum.x}
        G92 X{printer.toolhead.axis_maximum.x}
    {% else %}
        SET_DUAL_CARRIAGE CARRIAGE=1
        #SET_KINEMATIC_POSITION X={printer.toolhead.axis_minimum.x}
        G92 X{printer.toolhead.axis_minimum.x}
    {% endif %}

#TODO: do I really need to override this?
[gcode_macro M104]
rename_existing: M104.0
gcode:    
    ;RESPOND MSG="M104"
    {% set temperature = params.S|default(0)|float %}
    {% if printer.toolhead.extruder  == 'extruder' %}
        {% set extruder_index_default = 0 %}
    {% else %}
        {% set extruder_index_default = 1 %}
    {% endif %}
    {% set extruder_index = params.T|default(extruder_index_default)|int %}
    M104.0 S{temperature} T{extruder_index}
    ;{% if extruder_index == '0' %}
    ;    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={temperature}  
    ;{% else %}
    ;    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={temperature}  
    ;{% endif %}

#TODO: do I really need to override this?
[gcode_macro M109]
rename_existing: M109.0
gcode:    
    ;RESPOND MSG="M109"
    {% set temperature = params.S|default(0)|float %}
    {% if printer.toolhead.extruder  == 'extruder' %}
        {% set extruder_index_default = 0 %}
    {% else %}
        {% set extruder_index_default = 1 %}
    {% endif %}
    {% set extruder_index = params.T|default(extruder_index_default)|int %}
    M109.0 S{temperature} T{extruder_index}
    ;{% if extruder_index == '0' %}
    ;    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={temperature}  
    ;    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={temperature*0.99} MAXIMUM={temperature*1.01}
    ;{% else %}
    ;    SET_HEATER_TEMPERATURE HEATER=extruder1 TARGET={temperature}  
    ;    TEMPERATURE_WAIT SENSOR=extruder1 MINIMUM={temperature*0.99} MAXIMUM={temperature*1.01}
    ;{% endif %}

# It seems that cura does not control the second fan in copy/mirror mode, so we 
# have to take care of that. 
[gcode_macro M106]
gcode:
    {% set fan_speed = params.S|default(255)|float / 255.0 %}

    {% if printer.dual_carriage['carriage_1'] is in (['COPY', 'MIRROR']) %}        
        SET_FAN_SPEED FAN=left_part_fan SPEED={fan_speed}
        SET_FAN_SPEED FAN=right_part_fan SPEED={fan_speed}   
    {% else %}
        {% if printer.toolhead.extruder %}
            {% set current_fan_index = 0 %}
        {% else %}
            {% set current_fan_index = 1 %}
        {% endif %}
        {% set fan_index = params.P|default(current_fan_index)|int %}
        {% if fan_index == 0 %}
            {% set fan = 'right_part_fan' %}
        {% else %}
            {% set fan = 'left_part_fan' %}
        {% endif %}
        
        SET_FAN_SPEED FAN={fan} SPEED={fan_speed}
    {% endif %}

[gcode_macro M107]
gcode:
    ;RESPOND MSG="M107"
    {% if printer.toolhead.extruder %}
        {% set current_fan_index = 0 %}
    {% else %}
        {% set current_fan_index = 1 %}
    {% endif %}
    {% set fan_index = params.P|default(current_fan_index)|int %}
    {% if fan_index == 0 %}
        {% set fan = 'right_part_fan' %}
    {% else %}
        {% set fan = 'left_part_fan' %}
    {% endif %}
    
    SET_FAN_SPEED FAN={fan} SPEED=0.0

[gcode_macro T0]
description: Activate the right extruder in IDEX mode
gcode:
    #TODO: Part fan handling
    {% if printer.toolhead.extruder == 'extruder1' %}
        PARK_extruder1
        ACTIVATE_EXTRUDER EXTRUDER=extruder
        SET_DUAL_CARRIAGE CARRIAGE=0
        SET_GCODE_OFFSET Y_ADJUST=-0.5
        #SET_KINEMATIC_POSITION X={printer.toolhead.axis_maximum.x}
        G92 X{printer.toolhead.axis_maximum.x}
        G12
    {% endif %}

[gcode_macro T1]
description: Activate the left extruder in IDEX mode
gcode:
    #TODO: Part fan handling
    {% if printer.toolhead.extruder == 'extruder' %}
        PARK_{printer.toolhead.extruder}        
        ACTIVATE_EXTRUDER EXTRUDER=extruder1
        SET_DUAL_CARRIAGE CARRIAGE=1
        #SET_KINEMATIC_POSITION X={printer.toolhead.axis_minimum.x}
        SET_GCODE_OFFSET Y_ADJUST=0.5
        G92 X{printer.toolhead.axis_minimum.x}
        G12
    {% endif %}